// Grammar definition

file:
    expressions
    EOF;
expressions:
    primary_delimiters? expression+[primary_delimiters] primary_delimiters? |
    primary_delimiters?;
primary_delimiters:
    primary_delimiter+;
primary_delimiter:
    unbracketed_aligned_indent_outside_continuation |
    semicolon;
expression:
    comma_delimited_sequence |
    non_sequence;
comma_delimited_sequence:
    non_sequence comma comma_delimited_sequence |
    non_sequence comma non_sequence |
    non_sequence comma;
non_sequence:
    named_expression |
    anonymous_expression;
named_expression:
    key anonymous_expression;
anonymous_expression:
    term |
    call;
term:
    parenthesized_expression |
    empty_parentheses |
    braced_block |
    unbracketed_indented_block_without_continuation_marker |
    identifier |
    string |
    integer |
    float;
parenthesized_expression:
    open_parenthesis expression close_parenthesis;
empty_parentheses:
    open_parenthesis close_parenthesis;
braced_block:
    open_brace expressions close_brace;
unbracketed_indented_block_without_continuation_marker:
    unbracketed_increased_indent_without_continuation_marker
    expressions
    unbracketed_decreased_indent_outside_continuation;
identifier:
    simple_identifier |
    complex_identifier;
integer:
    decimal_integer |
    hexadecimal_integer |
    binary_integer |
    octal_integer;
call:
    callee named_argument+ |
    callee argument named_argument*;
callee:
    identifier |
    parenthesized_expression;
named_argument:
    key argument;
argument:
    term |
    chained_call;
chained_call:
    callee argument;

LAYOUT:
    discardable*;
discardable:
    blank_line |
    full_line_comment |
    partial_line_comment |
    insignificant_spaces |
    escaped_newline |
    bracketed_new_line |
    unbracketed_continuation_marker |
    unbracketed_increased_indent_after_continuation_marker |
    unbracketed_aligned_indent_inside_continuation |
    unbracketed_decreased_indent_inside_continuation;

terminals

// Non-discardable elements
semicolon: ";";
comma: ",";
key: /[a-zA-Z_]+[a-zA-Z0-9_]* *:/;
open_parenthesis: "(";
close_parenthesis: ")";
open_brace: "{";
close_brace: "}";
simple_identifier: /[a-zA-Z_]+[a-zA-Z0-9_]*/;
complex_identifier: /'(.*?)(?<!\\)'/;
string: /"(.*?)(?<!\\)"/;
decimal_integer: /[-+]?[0-9_]+/;
hexadecimal_integer: /[-+]?0[xX][0-9a-f_]+/;
binary_integer: /[-+]?0[bB][01_]+/;
octal_integer: /[-+]?0[oO][0-7_]+/;
float: /[-+]?(?:[0-9_]+())?(?:\.+())?(?:[0-9_]+())?(?:[eE]-?\d+())?(?:\2\3|\1\4|\1\2|\2\4)/;

// Discardable elements
blank_line: /\n *(?=\n)/;
full_line_comment: /\n *--.*(?=\n)/;
partial_line_comment: /--.*(?=\n)/;
insignificant_spaces: / +/;
escaped_newline: /\\ *\n/;

// Custom recognizers for non-discardable elements
unbracketed_aligned_indent_outside_continuation:;
unbracketed_increased_indent_without_continuation_marker:;
unbracketed_decreased_indent_outside_continuation:;

// Custom recognizers for discardable elements
bracketed_new_line:;
unbracketed_continuation_marker:;
unbracketed_increased_indent_after_continuation_marker:;
unbracketed_aligned_indent_inside_continuation:;
unbracketed_decreased_indent_inside_continuation:;
