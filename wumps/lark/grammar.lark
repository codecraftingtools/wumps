// Grammar definition

// Rules
file: \
    _expressions
_expressions: \
    _primary_delimiter* _expression?
  | _expressions _primary_delimiter _expressions
_primary_delimiters: \
    _primary_delimiter+
_primary_delimiter: \
    _UNBRACKETED_ALIGNED_INDENT_OUTSIDE_CONTINUATION
  | _SEMICOLON
_expression: \
    comma_delimited_sequence
 | _non_sequence
comma_delimited_sequence: \
    _comma_delimited_sequence -> sequence
_comma_delimited_sequence: \
    _non_sequence _COMMA _comma_delimited_sequence
  | _non_sequence _COMMA _non_sequence
  | _non_sequence _COMMA
_non_sequence: \
    named_expression
  | _anonymous_expression
named_expression: \
    KEY _anonymous_expression
  | KEY named_expression
  | KEY
_anonymous_expression: \
    _term
  | call
_term: \
    _non_identifier_term
  | _identifier
_non_identifier_term: \
    _parenthesized_expression
  | empty_parentheses
  | braced_block
  | unbracketed_indented_block_without_continuation_marker
  | binary_operation
  | _string
  | _integer
  | FLOAT
_parenthesized_expression: \
    _OPEN_PARENTHESIS _expression _CLOSE_PARENTHESIS
empty_parentheses: \
    _OPEN_PARENTHESIS _CLOSE_PARENTHESIS
braced_block: \
    _OPEN_BRACE _expressions _CLOSE_BRACE
unbracketed_indented_block_without_continuation_marker: \
    _UNBRACKETED_INCREASED_INDENT_WITHOUT_CONTINUATION_MARKER \
    _expressions \
    _UNBRACKETED_DECREASED_INDENT_OUTSIDE_CONTINUATION -> sequence
binary_operation: \
    _term _binary_operator _term
_binary_operator: \
    MEMBER_OPERATOR
_identifier: \
    SIMPLE_IDENTIFIER
  | COMPLEX_IDENTIFIER
_integer: \
    DECIMAL_INTEGER
  | HEXADECIMAL_INTEGER
  | BINARY_INTEGER
  | OCTAL_INTEGER
_string: \
    SIMPLE_STRING | BLOCK_STRING
call: \
    _callee named_argument+
  | _callee _argument named_argument*
_callee: \
    _term
named_argument: \
    KEY _argument
  | KEY
_argument: \
    _term
  | chained_call
chained_call: \
  _term _argument -> call

// Tokens generated by post-lex processing.
// These may also affect post-lex processing context.
%declare _UNBRACKETED_ALIGNED_INDENT_OUTSIDE_CONTINUATION
%declare _UNBRACKETED_INCREASED_INDENT_WITHOUT_CONTINUATION_MARKER
%declare _UNBRACKETED_DECREASED_INDENT_OUTSIDE_CONTINUATION

// Tokens generated and discarded by post-lex processing
// These do not affect post-lex processing context.
//   IMPLICIT_CONTINUATION_INDENT
//   BRACKETED_NEWLINE
//   UNBRACKETED_ALIGNED_INDENT_INSIDE_CONTINUATION

// Tokens generated and discarded by post-lex processing.
// These affect post-lex processing context.
//   UNBRACKETED_CONTINUATION_MARKER
//   UNBRACKETED_INCREASED_INDENT_AFTER_CONTINUATION_MARKER
//   UNBRACKETED_DECREASED_INDENT_INSIDE_CONTINUATION

// Terminals processed and discarded by post-lex processing.
// These affect post-lex processing context.
NEWLINE_AND_MAYBE_INDENT: /(\n *)/
CONTINUATION_MARKER: /\.\.\. *(--.*)?(?=\n)/
unused_terminals: NEWLINE_AND_MAYBE_INDENT CONTINUATION_MARKER

// Non-discardable terminals
_SEMICOLON: ";"
_COMMA: ","
KEY: /[a-zA-Z_]+[a-zA-Z0-9_]* *:/
_OPEN_PARENTHESIS: "("
_CLOSE_PARENTHESIS: ")"
_OPEN_BRACE: "{"
_CLOSE_BRACE: "}"
SIMPLE_IDENTIFIER: /[a-zA-Z_]+[a-zA-Z0-9_]*/
COMPLEX_IDENTIFIER: /'(.*?)(?<!\\)'/
SIMPLE_STRING: /"(.*?)(?<!\\)"/
BLOCK_STRING: /"""(([^"]+)|(\n))*"""/
DECIMAL_INTEGER: /[-+]?[0-9_]+/
HEXADECIMAL_INTEGER: /[-+]?0[xX][0-9a-f_]+/
BINARY_INTEGER: /[-+]?0[bB][01_]+/
OCTAL_INTEGER: /[-+]?0[oO][0-7_]+/
FLOAT: /[-+]?([0-9_]+\.[0-9_]*([eE]-?\d+)?|[0-9_]+([eE]-?\d+)|\.[0-9_]+([eE]-?\d+)?)/
MEMBER_OPERATOR: "."

// Discardable terminals
BLANK_LINE: /\n *(?=\n)/
FULL_LINE_COMMENT: /\n *--.*(?=\n)/
PARTIAL_LINE_COMMENT: /--.*(?=\n)/
INSIGNIFICANT_SPACES: / +/
ESCAPED_NEWLINE: /\\ *\n/

%ignore BLANK_LINE
%ignore FULL_LINE_COMMENT
%ignore PARTIAL_LINE_COMMENT
%ignore INSIGNIFICANT_SPACES
%ignore ESCAPED_NEWLINE
